import{a as S,b as i,c as b,d as p}from"./chunk-2X2WE554.js";import{C as u,R as h,V as d,Wb as m,l as a,p as l,t as g}from"./chunk-22QBDJS3.js";var R=class c{constructor(e){this.http=e}hubConnection;messageSubject=new a;message$=this.messageSubject.asObservable();messageSentSubject=new a;messageSent$=this.messageSentSubject.asObservable();connectionStateSubject=new a;connectionState$=this.connectionStateSubject.asObservable();userStatusSubject=new a;userStatus$=this.userStatusSubject.asObservable();messagesReadSubject=new a;messagesRead$=this.messagesReadSubject.asObservable();baseURL="https://xoname.runasp.net/";async startConnection(e){if(this.hubConnection&&this.hubConnection.state===i.Connected)return console.log("\u2705 SignalR already connected"),Promise.resolve();this.hubConnection=new p().withUrl(`${this.baseURL}chathub`,{withCredentials:!0,transport:b.WebSockets|b.LongPolling}).withAutomaticReconnect([0,2e3,5e3,1e4]).configureLogging(S.Information).build(),this.hubConnection.onclose(n=>{console.warn("\u26A0\uFE0F SignalR connection closed",n),this.connectionStateSubject.next(!1)}),this.hubConnection.onreconnecting(n=>{console.log("\u{1F504} SignalR reconnecting...",n),this.connectionStateSubject.next(!1)}),this.hubConnection.onreconnected(n=>{console.log("\u2705 SignalR reconnected:",n),this.connectionStateSubject.next(!0),this.registerUser(e)});try{await this.hubConnection.start(),console.log("\u2705 SignalR Connected Successfully"),this.connectionStateSubject.next(!0),this.registerUser(e),this.setupMessageListeners()}catch(n){throw console.error("\u274C SignalR Connection Error:",n),this.connectionStateSubject.next(!1),n}}setupMessageListeners(){this.hubConnection.on("ReceiveMessage",(...e)=>{console.log("\u{1F4E9} [ReceiveMessage] Raw data:",e);try{let n,t,s;if(e.length===1&&typeof e[0]=="object"){let r=e[0];n=r.senderId||r.SenderId||0,t=r.message||r.Message||r.content||r.Content||"",s=r.senderName||r.SenderName||"\u0645\u0633\u062A\u062E\u062F\u0645"}else if(e.length>=2)n=typeof e[0]=="number"?e[0]:e[0]?.senderId||0,t=e[1]||"",s=e[2]||"\u0645\u0633\u062A\u062E\u062F\u0645";else{console.error("\u274C Unknown ReceiveMessage format:",e);return}if(!n||!t){console.warn("\u26A0\uFE0F Invalid message data:",{senderId:n,message:t});return}console.log("\u2705 Parsed ReceiveMessage:",{senderId:n,message:t,senderName:s});let o={id:Date.now(),senderId:n,senderName:s,content:t,sentAt:new Date,isRead:!1};this.messageSubject.next(o)}catch(n){console.error("\u274C Error parsing ReceiveMessage:",n)}}),this.hubConnection.on("MessageSent",(...e)=>{console.log("\u{1F4E4} [MessageSent] Raw data:",e);try{if(e.length===1&&typeof e[0]=="object"){let n=e[0];if(n.content||n.Content){let t=n.senderId||n.SenderId||0,s=n.content||n.Content||"",o=n.senderName||n.SenderName||"\u0645\u0633\u062A\u062E\u062F\u0645";if(t&&s){console.log("\u2705 MessageSent contains full message");let r={id:n.id||Date.now(),senderId:t,senderName:o,content:s,sentAt:n.sentAt?new Date(n.sentAt):new Date,isRead:!1};this.messageSubject.next(r);return}}}this.messageSentSubject.next(e)}catch(n){console.error("\u274C Error parsing MessageSent:",n)}}),this.hubConnection.on("MessagesRead",(...e)=>{console.log("\u{1F441}\uFE0F Messages marked as read:",e),e.length>0&&typeof e[0]=="number"&&this.messagesReadSubject.next(e[0])}),this.hubConnection.on("UserOffline",e=>{console.log("\u{1F464} User offline:",e),this.userStatusSubject.next({userId:e,isOnline:!1})}),this.hubConnection.on("UserOnline",e=>{console.log("\u{1F464} User online:",e),this.userStatusSubject.next({userId:e,isOnline:!0})}),this.hubConnection.on("Error",(...e)=>{let n=e[0]?.toString()||"";if(["\u0627\u0644\u0645\u0631\u0633\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F","sender not found","user not found","\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F"].some(o=>n.toLowerCase().includes(o.toLowerCase()))){console.warn("\u26A0\uFE0F Backend validation error (ignored):",n);return}console.error("\u274C SignalR Error:",e)})}registerUser(e){this.hubConnection.state===i.Connected&&this.hubConnection.invoke("RegisterUser",e).then(()=>console.log("\u2705 User registered in SignalR:",e)).catch(n=>console.error("\u274C User registration error:",n))}async sendMessageViaAPI(e,n,t,s){console.log("\u{1F4E4} [API] Sending message:",{senderId:e,receiverId:n,content:t});try{let o=await g(this.http.post(`${this.baseURL}api/messages/send`,{senderId:e,receiverId:n,content:t,senderName:s}));return console.log("\u2705 [API] Message saved"),o}catch(o){throw console.error("\u274C [API] Error:",o),o}}sendMessageViaSignalR(e,n,t){this.hubConnection?.state===i.Connected?this.hubConnection.invoke("SendMessage",e,n,t).then(()=>console.log("\u2705 [SignalR] Message sent")).catch(s=>console.warn("\u26A0\uFE0F [SignalR] Send error:",s)):console.warn("\u26A0\uFE0F SignalR not connected")}async getConversation(e,n){console.log("\u{1F504} Fetching conversation:",{userId:e,otherUserId:n});try{return await g(this.http.get(`${this.baseURL}api/messages/conversation/${e}/${n}`))}catch(t){return console.error("\u274C Error fetching conversation:",t),{data:[]}}}getAllConversations(e){return this.http.get(`${this.baseURL}api/messages/conversations/${e}`).pipe(u(n=>(console.error("\u274C Error fetching conversations:",n),l({data:[]}))))}getUnreadNotifications(e){return this.http.get(`${this.baseURL}api/messages/unread/${e}`).pipe(u(n=>(console.error("\u274C Error fetching unread messages:",n),l({data:[]}))))}markAsRead(e){console.log("\u{1F441}\uFE0F Marking messages as read for user:",e),this.hubConnection?.state===i.Connected?this.hubConnection.invoke("MarkAsRead",e).then(()=>{console.log("\u2705 Marked as read via SignalR"),this.messagesReadSubject.next(e)}).catch(n=>{console.warn("\u26A0\uFE0F SignalR markAsRead failed, trying API:",n),this.markAsReadViaAPI(e)}):(console.warn("\u26A0\uFE0F SignalR not connected, using API for markAsRead"),this.markAsReadViaAPI(e))}markAsReadViaAPI(e){this.http.post(`${this.baseURL}api/messages/markasread`,{userId:e}).subscribe({next:()=>{console.log("\u2705 Marked as read via API"),this.messagesReadSubject.next(e)},error:n=>{console.error("\u274C API markAsRead failed:",n)}})}disconnect(){this.hubConnection&&this.hubConnection.stop().then(()=>console.log("\u{1F44B} SignalR disconnected")).catch(e=>console.error("Error disconnecting:",e))}static \u0275fac=function(n){return new(n||c)(d(m))};static \u0275prov=h({token:c,factory:c.\u0275fac,providedIn:"root"})};export{R as a};
